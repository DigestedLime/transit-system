=====
ADD INSTRUCTIONS FOR HOW TO RUN/USE YOUR PROGRAM HERE:
e.g. What format should we use to input data or add data to events.txt? Anything else we need to know in order to use your program?
=====

We save the data, but it is intended to work continuously (never turn off)

HOW TO USE:

- How to Register
	- First, open the application and click on the register button
	- Enter in your Full Name, Email Address, and Password for the account (No spaces!)
	- Once logged in, you are able to see the dashboard!

- How to Log-in once Registered
	- First, click on the log-in button and enter in your credentials for the account that you have registered with
	- If you have entered in the right credentials, you should be put into the dashboard, otherwise please re-enter the credentials

- How to use the dashboard once logged in

	- How to load in more money for the cards that are associated with your account 
		- Please select the card that you would like to load money into
		- Click on the buttons at the top that say "Load $10", "Load $20", "Load $50" and click on the desired amount to put into the account

	- How to deactivate a card on the account
		- Please click on the card that is desired to be deactivated
		- Click on the deactivate button

	- How to remove a card on the account
		- Please click on the card that is desired to be removed from the account
		- Click on the remove button

	- Click on Sign-out to sign out of the account and be put back into the menu screen
	- Click on Exit Application to close the program


- How to Travel
	- Please enter the Card ID/Number that is wished to be used for the journey, 
	- When entering
		- Please enter the time that you got on, and the current station that you are at (Both inputs must be valid, cannot have a wrong time or an unknown bus/train station)
		- Click on Tap On once the information is inputted correctly
	- When exiting
		- Please enter the time that you got off, and the current station that you arrived at 
		(Both inputs must be correct, cannot have a wrong time where the time getting on is after the time getting off, or an unknown bus/train station)
		- Click on Tap Off once you have arrived at the correct destination
	- The fare will be automatically calculated!

- Admin Features
	- First, click on the log in button to log into your admin account
	- The dashboard is different from what the user sees
	
	- How to Generate the Daily Report 
		- Click on the Daily Report button
		- This would print out in the console for the day
	
	- How to Generate Reports with any start time and end time
		- Please enter the time and date of the start time and the time and date of the end time
		- Then click Generate to generate a report with the times
		- This would print out in the console for the allotted time span


=====
LIST ALL FEATURES THAT YOU WORKED ON HERE, AND HOW TO INPUT RELEVANT DATA FOR THE FEATURE (IF APPLICABLE)
=====

FEATURE 1

Description: Tapping a card at a station.

Usage Instructions: We can enter the time and the station when we entered the station to signify that we have tapped onto a bus/train station.

Design Decisions: Makes sure that the user enters the right station at the right time and it's easier to pull the data from there to do the calculations. We made a tap on and a tap off button so that we can better handle if the user made a mistake in forgetting to tap or not.


FEATURE 2

Description: GUI

Usage Instructions: Should be fairly intuitive on how to use the system, instead of guessing which buttons to press.

Design Decisions: We made a modified version of MVC. There is a controller for every screen that we have and a parent for the controllers that is extended to the children that would make it easier to switch to different screens as all screens have the same exit button.


FEATURE 3

Description: We get to see the costs and the profits as an admin user.

Usage Instructions: Go to the admin user dashboard by logging in as an admin user. We also need the information of the costs of running the transit system.

Design Decisions: 


FEATURE 4

Description: Exiting GUI instead of closing the window itself.

Usage Instructions: Clicking on the exit or exit application would close the window.

Design Decisions: We chose to go this route as it was a lot cleaner and it would be better to close objects once we were finished using them.


FEATURE 5

Description: Cardholders can store their name, email address, and travel cards.

Usage Instructions: any information that is inputted and needed to be saved for other features such as daily reports or saving general information like names and cards, will be saved..

Design Decisions: We chose to store their name so that we can use them in other features. We used the objects from the FXML file to store the information and then saved the information elsewhere.


FEATURE 6

Description: Card holders can change their name but not their email address.

Usage Instructions: Change your name using the given button in the GUI when you have logged in.

Design Decisions: 


FEATURE 7

Description: Cards can be removed or suspended.

Usage Instructions: Use the appropriate button in the dashboard GUI

Design Decisions: Decided for a card to have a suspended boolean, so any action on a card has to check whether it is suspended or not


FEATURE 8

Description:  New cards are made with a starting balance of $19.

Usage Instructions: Click “New Button” in dashboard

Design Decisions: Adds to the end of list for the CustomerUser object.


FEATURE 9
Description: Cards only have a negative balance if it was positive and charged greater than the balance, after which it needs to first be loaded till positive until it can be used again.

Usage Instructions:If a user goes on a journey with a positive balance before the journey and negative after, allows the transaction, but no further travel until money is loaded

Design Decisions: Similar to Suspended cards, each card has a checker to see if it can be used to pay, if not then you can only add money till you can pay


FEATURE 10

Description: Cardholders can add $10, $20, and $50 dollars to a card at a time.

Usage Instructions:Use the buttons in the dashboard GUI 

Design Decisions:Simply used method in TravelCard to add money


FEATURE 11

Description: Admin users can have access to the total number of stations reached by all cardholders and fares collected each day.

Usage Instructions: Go to Log in. Use the following credentials ONLY: email: admin2312 password:557324

Design Decisions: Using the same controller, added one distinct admin id that could not be guessed


FEATURE 12

Description: Have system be extensible for more detailed stats to also be viewed if needed.

Usage Instructions: N/A

Design Decisions: Data is passed using setData. More can be passed if need be


FEATURE 13

Description: Allow transit users to input tap ins and tap outs, with the appropriate fare cost being deducted from the card

Usage Instructions: once the user taps in and taps out when travelling, the fare would automatically be deducted from the card and that can be viewed with in the account

Design Decisions: 


FEATURE 14

Description: Each bus ride costs $2 and is deducted when entering a bus.

Usage Instructions: Deducted automatically

Design Decisions: This is based on how the application should work.


FEATURE 15

Description: Train rides cost $0.50 per station travelled to, and the cost is calculated when leaving the station.

Usage Instructions: There are no instructions, calculations will be done by the system.

Design Decisions: This is based on how the application should work.


FEATURE 16

Description:  Have trips fares be capped at 6.

Usage Instructions: There are no instructions, this is done by the application itself.

Design Decisions: This is based on how the application should work


FEATURE 17

Description: Be able to handle situations where one taps out before ever tapping in, or they do not ever tap out.

Usage Instructions: The program would not let you tap out if you did not tap in and if you never tap out, then it should not throw an error.

Design Decisions: So it would not cause any errors (error catching for the user) 


FEATURE 18:

Description: Tap outs record time and location

Usage Instructions: When the user is done travelling, they must enter the time and the location of when they tap out

Design Decisions: Would make it easier to calculate the time and the fares of the user






======

Note: If you have design decisions that don't fit under a specific feature, but are instead relevant to multiple features, feel free to include them at the bottom of this file here.

OTHER NOTES
User is a parent class, with CustomerUser and AdminUser being added as they can inherit features
Several Controllers with similar loading in, therefore Parent Controller and children controllers for each screen
Used Scenebuilder to make the GUI and to make user interaction a lot easier compared to something like a text based application
